name: Release Management

on:
  push:
    branches: [main, master]
  pull_request:
    types: [closed]

env:
  NODE_VERSION: '18'

jobs:
  update-release-draft:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Update release draft
        uses: release-drafter/release-drafter@v5
        with:
          config-name: release-drafter.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}

  create-release:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'release')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GIT_TOKEN }}

      - name: Get version from package.json
        id: get_version
        run: |
          VERSION=$(node -p "require('./client/package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT

      - name: Create and push tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "v${{ steps.get_version.outputs.version }}" -m "Release v${{ steps.get_version.outputs.version }}"
          git push origin "v${{ steps.get_version.outputs.version }}"

      - name: Publish release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GIT_TOKEN }}
          script: |
            const version = "${{ steps.get_version.outputs.version }}";
            await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${version}`,
              name: `v${version} ðŸŒŸ`,
              body: `Release v${version}`,
              draft: false,
              prerelease: false
            });
